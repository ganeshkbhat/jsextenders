{"version":3,"file":"pysort.js","sourceRoot":"","sources":["../../src/pysort.js"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * \r\n * Package: extenders\r\n * Author: Ganesh B\r\n * Description: \r\n * Install: npm i extenders --save\r\n * Github: https://github.com/ganeshkbhat/jsextenders\r\n * npmjs Link: https://www.npmjs.com/package/extenders\r\n * File: src/pysort.js\r\n * File Description: \r\n * \r\n * \r\n*/\r\n\r\n/* eslint no-console: 0 */\r\n\r\n'use strict';\r\n\r\nfunction merge_sort(array) {\r\n    // # If the input array contains fewer than two elements,\r\n    // # then return it as the result of the function\r\n    // == //\r\n    // if (len(array) < 2) {\r\n    if (array.length < 2) {\r\n        return array\r\n    }\r\n\r\n    // == //\r\n    // var midpoint = len(array) // 2\r\n    var midpoint = array.length\r\n\r\n    // # Sort the array by recursively splitting the input\r\n    // # into two equal halves, sorting each half and merging them\r\n    // # together into the final result\r\n    // ==> //\r\n    // return merge(\r\n    //     left = merge_sort(array[: midpoint]),\r\n    //     right = merge_sort(array[midpoint:]))\r\n\r\n    // == //\r\n    var left = merge_sort(array.slice(0, midpoint))\r\n    var right = merge_sort(array.slice(midpoint, array.length))\r\n    return merge(left, right);\r\n}\r\n\r\n\r\nfunction timsort(array) {\r\n    var min_run = 32\r\n    // == //\r\n    // var n = len(array)\r\n    var n = array.length;\r\n\r\n    // # Start by slicing and sorting small portions of the\r\n    // # input array. The size of these slices is defined by\r\n    // # your `min_run` size.\r\n    // == //\r\n    let ar = [].range(0, n, min_run);\r\n    for (i in ar) {\r\n        insertion_sort(array, i, [].min(1, 0, 2, [(i + min_run - 1), n - 1]))\r\n    }\r\n\r\n\r\n    // # Now you can start merging the sorted slices.\r\n    // # Start from `min_run`, doubling the size on\r\n    // # each iteration until you surpass the length of\r\n    // # the array.\r\n    var size = min_run\r\n    while (size < n) {\r\n        // # Determine the arrays that will\r\n        // # be merged together\r\n        // \r\n        let ar = [].range(0, n, size * 2);\r\n        for (start in ar) {\r\n            // # Compute the `midpoint` (where the first array ends\r\n            // # and the second starts) and the `endpoint` (where\r\n            // # the second array ends)\r\n            var midpoint = start + size - 1\r\n            var end = [].min(1, 0, 2, [(start + size * 2 - 1), (n - 1)])\r\n\r\n            // # Merge the two subarrays.\r\n            // # The `left` array should go from `start` to\r\n            // # `midpoint + 1`, while the `right` array should\r\n            // # go from `midpoint + 1` to `end + 1`.\r\n            // == //\r\n            // merged_array = merge(\r\n            //     left = array[start: midpoint + 1],\r\n            //     right = array[midpoint + 1: end + 1])\r\n\r\n            var left = array.slice(start, midpoint + 1)\r\n            var right = array.slice(midpoint + 1, end + 1)\r\n            // merged_array = merge(left, right)\r\n            merged_array = [].merge(...left, ...right)\r\n\r\n            // # Finally, put the merged array back into\r\n            // # your array\r\n            // == //\r\n            // array[start: start + len(merged_array)] = merged_array\r\n\r\n            array = [...array.splice(0, start), ...merged_array, ...array.splice(start + merged_array.length, array.length)];\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // # Each iteration should double the size of your arrays\r\n    size *= 2\r\n\r\n    return array\r\n}\r\n\r\n\r\nfunction insertion_sort(array, left = 0, right = null) {\r\n    if (right === null) {\r\n        // == //\r\n        // right = len(array) - 1\r\n        right = array.length - 1\r\n    }\r\n\r\n\r\n    // # Loop from the element indicated by\r\n    // # `left` until the element indicated by `right`\r\n    // == //\r\n    // for (i in range(left + 1, right + 1)) {\r\n    let ar = [].range(left + 1, right + 1);\r\n    for (i in ar) {\r\n        // # This is the element we want to position in its\r\n        // # correct place\r\n        var key_item = array[i]\r\n\r\n        // # Initialize the variable that will be used to\r\n        // # find the correct position of the element referenced\r\n        // # by `key_item`\r\n        j = i - 1\r\n\r\n        // # Run through the list of items (the left\r\n        // # portion of the array) and find the correct position\r\n        // # of the element referenced by `key_item`. Do this only\r\n        // # if the `key_item` is smaller than its adjacent values.\r\n        while (j >= left && array[j] > key_item) {\r\n            // # Shift the value one position to the left\r\n            // # and reposition `j` to point to the next element\r\n            // # (from right to left)\r\n            array[j + 1] = array[j]\r\n            j -= 1\r\n        }\r\n\r\n\r\n        // # When you finish shifting the elements, position\r\n        // # the `key_item` in its correct location\r\n        array[j + 1] = key_item\r\n    }\r\n\r\n\r\n    return array\r\n}\r\n\r\n\r\n"]}