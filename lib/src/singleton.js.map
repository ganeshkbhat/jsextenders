{"version":3,"file":"singleton.js","sourceRoot":"","sources":["../../src/singleton.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;EAYE;AAEF,0BAA0B;AAE1B,YAAY,CAAC;AAEb;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,IAAI,SAAS,GAAG,UAAU,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM;IAClD,IAAI,GAAG,EAAE,CAAC;QACN,IAAI,MAAM,IAAI,OAAO,EAAE,CAAC;YACpB,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;QACzB,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;gBACjB,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;YACzB,CAAC;QACL,CAAC;QACD,IAAI,MAAM,EAAE,CAAC;YACT,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/B,CAAC;IACL,CAAC;SAAM,CAAC;QACJ,OAAO,SAAS,CAAC;IACrB,CAAC;IACD,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;AACvB,CAAC,CAAA;AAED,MAAM,CAAC,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC","sourcesContent":["/**\r\n * \r\n * Package: extenders\r\n * Author: Ganesh B\r\n * Description: Node module for Array, Object, String, Decorator extention Utils like for Python and more for Node.js\r\n * Install: npm i extenders --save\r\n * Github: https://github.com/ganeshkbhat/jsextenders\r\n * npmjs Link: https://www.npmjs.com/package/extenders\r\n * File: src/singleton.js\r\n * File Description: \r\n * \r\n * \r\n*/\r\n\r\n/* eslint no-console: 0 */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Creates a global singleton\r\n * Takes `key` of the global variable and associated `object` to create if not there\r\n * Can force replace the object if `replace` TRUE\r\n * Freeze boolean `freeze` will make the object immutable\r\n * Returns undefined if `key` not specified\r\n * \r\n * @param {string} key \r\n * @required\r\n * \r\n * @param {any} object \r\n * @optional Default: undefined\r\n * \r\n * @param {boolean} replace \r\n * @optional Default: false\r\n * \r\n * @param {boolean} freeze \r\n * @optional Default: false\r\n * \r\n * @returns global object or undefined\r\n * \r\n */\r\nvar singleton = function (key, object, replace, freeze) {\r\n    if (key) {\r\n        if (object && replace) {\r\n            global[key] = object;\r\n        } else {\r\n            if (!(global[key])) {\r\n                global[key] = object;\r\n            }\r\n        }\r\n        if (freeze) {\r\n            Object.freeze(global[key]);\r\n        }\r\n    } else {\r\n        return undefined;\r\n    }\r\n    return global[key];\r\n}\r\n\r\nmodule.exports.singleton = singleton;\r\n\r\n"]}