{"version":3,"file":"cryptobase.js","sourceRoot":"","sources":["../../src/cryptobase.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;EAYE;AAEF,0BAA0B;AAE1B,YAAY,CAAC;AAEb,MAAM,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAEvC;;;;;GAKG;AACH,SAAS,OAAO,CAAC,IAAI,EAAE,IAAI;AAE3B,CAAC;AAED;;;;;GAKG;AACH,SAAS,OAAO,CAAC,QAAQ,EAAE,IAAI;AAE/B,CAAC;AAED;;;;;GAKG;AACH,SAAS,cAAc,CAAC,IAAI,EAAE,GAAG;AAEjC,CAAC;AAED;;;;;GAKG;AACH,SAAS,cAAc,CAAC,QAAQ,EAAE,GAAG;AAErC,CAAC;AAED;;;;;GAKG;AACH,SAAS,iBAAiB,CAAC,IAAI,EAAE,GAAG;AAEpC,CAAC;AAED;;;;;GAKG;AACH,SAAS,iBAAiB,CAAC,QAAQ,EAAE,GAAG;AAExC,CAAC;AAED,MAAM,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;AACjC,MAAM,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;AACjC,MAAM,CAAC,OAAO,CAAC,cAAc,GAAG,cAAc,CAAC;AAC/C,MAAM,CAAC,OAAO,CAAC,cAAc,GAAG,cAAc,CAAC;AAC/C,MAAM,CAAC,OAAO,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;AACrD,MAAM,CAAC,OAAO,CAAC,iBAAiB,GAAG,iBAAiB,CAAC","sourcesContent":["/**\r\n * \r\n * Package: extenders\r\n * Author: Ganesh B\r\n * Description: Node module for Array, Object, String, Decorator extention Utils like for Python and more for Node.js\r\n * Install: npm i extenders --save\r\n * Github: https://github.com/ganeshkbhat/jsextenders\r\n * npmjs Link: https://www.npmjs.com/package/extenders\r\n * File: src/cryptobase.js\r\n * File Description: \r\n * \r\n * \r\n*/\r\n\r\n/* eslint no-console: 0 */\r\n\r\n'use strict';\r\n\r\nconst cryptor = require(\"hasher-apis\");\r\n\r\n/**\r\n *\r\n *\r\n * @param {*} data\r\n * @param {*} salt\r\n */\r\nfunction encrypt(data, salt) {\r\n\r\n}\r\n\r\n/**\r\n *\r\n *\r\n * @param {*} hashData\r\n * @param {*} salt\r\n */\r\nfunction decrypt(hashData, salt) {\r\n\r\n}\r\n\r\n/**\r\n *\r\n *\r\n * @param {*} data\r\n * @param {*} key\r\n */\r\nfunction encryptWithKey(data, key) {\r\n\r\n}\r\n\r\n/**\r\n *\r\n *\r\n * @param {*} hashData\r\n * @param {*} key\r\n */\r\nfunction decryptWithKey(hashData, key) {\r\n\r\n}\r\n\r\n/**\r\n *\r\n *\r\n * @param {*} data\r\n * @param {*} key\r\n */\r\nfunction encryptWithRSAKey(data, key) {\r\n\r\n}\r\n\r\n/**\r\n *\r\n *\r\n * @param {*} hashData\r\n * @param {*} key\r\n */\r\nfunction decryptWithRSAKey(hashData, key) {\r\n\r\n}\r\n\r\nmodule.exports.encrypt = encrypt;\r\nmodule.exports.decrypt = decrypt;\r\nmodule.exports.encryptWithKey = encryptWithKey;\r\nmodule.exports.decryptWithKey = decryptWithKey;\r\nmodule.exports.encryptWithRSAKey = encryptWithRSAKey;\r\nmodule.exports.decryptWithRSAKey = decryptWithRSAKey;\r\n"]}