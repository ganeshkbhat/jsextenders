{"version":3,"file":"decorator.js","sourceRoot":"","sources":["../../src/decorator.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;EAYE;AAEF,0BAA0B;AAE1B,YAAY,CAAC;AAEb;;;;;GAKG;AACH,SAAS,qBAAqB,CAAC,WAAW;IACtC,OAAO,UAAU,GAAG,IAAI;QACpB,OAAO,UAAU,MAAM,EAAE,IAAI,EAAE,UAAU;YACrC,MAAM,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC;YAEpC,UAAU,CAAC,KAAK,GAAG,UAAU,GAAG,MAAM;gBAClC,MAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;gBAC9C,OAAO,WAAW,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC;YACxC,CAAC,CAAC;YAEF,OAAO,UAAU,CAAC;QACtB,CAAC,CAAA;IACL,CAAC,CAAA;AACL,CAAC;AAED;;;;;GAKG;AACH,SAAS,oBAAoB,CAAC,WAAW;IACrC,OAAO,UAAU,GAAG,IAAI;QACpB,OAAO,UAAU,MAAM;YACnB,WAAW,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC;YAC7B,OAAO,MAAM,CAAC;QAClB,CAAC,CAAA;IACL,CAAC,CAAA;AACL,CAAC;AAED,MAAM,CAAC,OAAO,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;AAC7D,MAAM,CAAC,OAAO,CAAC,oBAAoB,GAAG,oBAAoB,CAAC","sourcesContent":["/**\r\n * \r\n * Package: extenders\r\n * Author: Ganesh B\r\n * Description: Node module for Array, Object, String, Decorator extention Utils like for Python and more for Node.js\r\n * Install: npm i extenders --save\r\n * Github: https://github.com/ganeshkbhat/jsextenders\r\n * npmjs Link: https://www.npmjs.com/package/extenders\r\n * File: src/decorator.js\r\n * File Description: \r\n * \r\n * \r\n*/\r\n\r\n/* eslint no-console: 0 */\r\n\r\n'use strict';\r\n\r\n/**\r\n *\r\n *\r\n * @param {*} decoratorFn\r\n * @return {*} \r\n */\r\nfunction createMethodDecorator(decoratorFn) {\r\n    return function (...args) {\r\n        return function (target, name, descriptor) {\r\n            const originalFn = descriptor.value;\r\n\r\n            descriptor.value = function (...fnArgs) {\r\n                const result = originalFn.apply(this, fnArgs);\r\n                return decoratorFn(result, ...args);\r\n            };\r\n\r\n            return descriptor;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n *\r\n * @param {*} decoratorFn\r\n * @return {*} \r\n */\r\nfunction createClassDecorator(decoratorFn) {\r\n    return function (...args) {\r\n        return function (target) {\r\n            decoratorFn(target, ...args);\r\n            return target;\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports.createMethodDecorator = createMethodDecorator;\r\nmodule.exports.createClassDecorator = createClassDecorator;\r\n\r\n\r\n// https://www.geeksforgeeks.org/what-are-decorators-and-how-are-they-used-in-javascript/\r\n\r\n// // DECORATORS SIMPLE\r\n//\r\n// let variable = function (color) {\r\n//\r\n//   return function (target) {\r\n//     target.property = color;\r\n//   }\r\n// };\r\n//\r\n// // The value is passed in the decorator\r\n// @variable('GFG is Green')\r\n// class GFG { }\r\n//\r\n// console.log(GFG.property);\r\n//\r\n\r\n\r\n// // DECORATORS CLASS METHODS\r\n//\r\n// function gfg(target, name, descriptor) {\r\n//\r\n//   var fn = descriptor.value;\r\n//   // Checks if \"descriptor.value\"\r\n//   // is a function or not\r\n//\r\n//   if (typeof fn == 'function') {\r\n//     descriptor.value = function (...args) {\r\n//       // Document.write(`parameters: ${args}`+\"<br>\");\r\n//       console.log(`parameters: ${args}`);\r\n//       var result = fn.apply(this, args);\r\n//       // Document.write(`addition: ${result}`);\r\n//       // Print the addition of passed arguments\r\n//       console.log(`addition: ${result}`);\r\n//       return result;\r\n//     }\r\n//   }\r\n//\r\n//   return descriptor;\r\n//\r\n// }\r\n//\r\n\r\n// // DECORATORS CLASS\r\n//\r\n// class geek {\r\n//   @gfg\r\n//   add(a, b) {\r\n//     return a + b;\r\n//   }\r\n// }\r\n//\r\n// var e = new geek();\r\n// e.add(100, 200);\r\n//\r\n\r\n// // DECORATORS CLASS METHODS\r\n//\r\n// let readonly = function (target, key, descriptor) {\r\n//   descriptor.writable = false;\r\n//   return descriptor;\r\n// }\r\n//\r\n// class car {\r\n//   constructor(color) {\r\n//     this.color = color;\r\n//   }\r\n//   // Decorator\r\n//   @readonly\r\n//   getColor() {\r\n//     return this.color;\r\n//   }\r\n// }\r\n// const rCar = new car('car is Black');\r\n// // When descriptor.writable = false;\r\n// rCar.getColor = function () {\r\n//   // When descriptor.writable = true;\r\n//   return 'car is not Black'\r\n// }\r\n// console.log(rCar.getColor());\r\n//\r\n\r\n\r\n// // DECORATORS NEW CLASS MODIFICATION\r\n//\r\n// function log()\r\n// // Decorator function\r\n// {\r\n//   return function decorator() {\r\n//     // \"arrow\" function\r\n//     return (...args) => {\r\n//       console.log(`Parameters : args`);\r\n//       return new Class(...args);\r\n//     };\r\n//   }\r\n// }\r\n//\r\n// // Decorators\r\n// @log\r\n// class gfg {\r\n//   constructor(name, category) { }\r\n// }\r\n//\r\n// const e = new gfg('geek', 'code');\r\n// // Arguments for Demo: args\r\n// console.log(e);\r\n// \r\n\r\n\r\n"]}