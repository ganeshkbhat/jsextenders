/**
 *
 * Package:
 * Author: Ganesh B
 * Description: Node module for Array, Object, String, Decorator extention Utils like for Python and more for Node.js
 * Install: npm i extenders --save
 * Github: https://github.com/ganeshkbhat/jsextenders
 * npmjs Link: https://www.npmjs.com/package/extenders
 * File: Tests for src/.js in test/demos.array.js
 * File Description:
 *
*/

/* eslint no-console: 0 */

'use strict';


const expect = require('chai').expect;
var { ArrayExtended, extendArray } = require("../index.js");
extendArray();

describe('test-.mjs::extenders: Test Suite for extenders Files', function () {


    describe('test-.js::extenders: [Test A] Test Suite for extenders in main repo directory', function () {

        it('[Test A] Test for ', function (done) {
            let a = [1, 2, 3, 4, 5, 6, 7, 8, 9];
            let b = [1, 2, 3, 4, 5, 6, 7, 8, 9];
            let c = [1, 2, 3, 4, 5, [1, 2, 3], 6, 7, [1, 2, 3, 4, [1, 2, 3], 5, 6], 8, [1, 2, [1, 2, [1, 2, 3], 3, 4, 5], 3, 4, 5], 9];
            let d = [1, 2, 3, 4, 5, [1, 2, 3], 6, 7, [1, 2, 3, 4, [1, 2, 3], 5, 6], 8, [1, 2, [1, 2, [1, 2, 3], 3, 4, 5], 3, 4, 5], 9];
            let f = [1.2, 2.5, 3.6, 4.3, 5.8, 6.1, 7.1, 8.6, 9.0];


            let e = [...a];
            expect(e.execute((iterable) => JSON.stringify(iterable)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.extend(b, 3)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.append(b)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.isArray()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.isArray(b)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.insertAll(2, b)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.insert(0, b)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.replace(0, 2)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.replaceAll(4, 2)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a, 4, 4, 4];
            expect(e.replaceAll(4, 2)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.remove(2)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.removeAll(4)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a, 4, 4, 4];
            expect(e.removeAll(4, 2, 6)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.insertAllCopy(2, b)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.insertCopy(0, b)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.replaceCopy(0, 2)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.replaceAllCopy(4, 2)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a, 4, 4, 4];
            expect(e.replaceAllCopy(4, 2)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.removeCopy(2)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.removeAllCopy(4)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a, 4, 4, 4];
            expect(e.removeAllCopy(4, 2, 6)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.popIndex(0)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.clear()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.index(2)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.count(2)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.pysort()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.reverser()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.reverseCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.copy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.diffIterable(c)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.diffSelf(c)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.diffBoth(c)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.equal(c)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.equal(b)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.similar(b)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.similar(c)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.uniques()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.uniques(2, 5)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.uniquesCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.duplicates()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.duplicatesCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.enqueue(100)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.dequeue()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.transpose()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.transposeCopy()).to.equal(200);
            expect(e).to.equal(200);
            // e = [...a];
            // expect(e.immutables()).to.equal(200);
            // expect(e).to.equal(200);
            // e = [...a];
            // expect(e.freeze()).to.equal(200);
            // expect(e).to.equal(200);
            // e[2] = 12;
            // expect(e).to.equal(200);
            // e = [...a];
            // expect(e.tuple()).to.equal(200);
            // expect(e).to.equal(200);
            // e[2] = 12;
            // expect(e).to.equal(200);
            e = [...c];
            expect(e.flatten()).to.equal(200);
            expect(e).to.equal(200);
            e = [...c];
            expect(e.flatten(2, 7)).to.equal(200);
            expect(e).to.equal(200);
            e = [...c];
            expect(e.flattenCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...c];
            expect(e.flattenDeep()).to.equal(200);
            expect(e).to.equal(200);
            e = [...c];
            expect(e.flattenDeepCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.range(15)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.enumerate()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.del(3)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.del(3, 6)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.del()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.diction()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.toObject()).to.equal(200);
            expect(e).to.equal(200);
            e = [...c];
            expect(e.subset(a)).to.equal(200);
            expect("result e, a", e, a).to.equal(200);
            e = [...c];
            expect(e.superset(a)).to.equal(200);
            expect(e, a).to.equal(200);
            e = [...a];
            expect(e.extender(function namertest() { console.log("namertest", JSON.stringify([...this])) }, Array)).to.equal(200);
            expect(e.namertest()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.log()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.max()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.maxIndexes()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.min()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.minIndexes()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.average()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.sum()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.factorialMap()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.acosMap()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.sinMap()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.asinMap()).to.equal(200);
            expect(e).to.equal(200);
            e = [...f];
            expect(e.absMap()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.cosMap()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.acosMapCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.sinMapCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.asinMapCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.absMapCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.cosMapCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.LN2MapCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.LN10MapCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.LOG2EMapCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.LOG10EMapCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.LN2MapCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.LN10MapCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.LOG2EMapCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.LOG10EMapCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...f];
            expect(e.floorMap()).to.equal(200);
            expect(e).to.equal(200);
            e = [...f];
            expect(e.ceilMap()).to.equal(200);
            expect(e).to.equal(200);
            e = [...f];
            expect(e.roundMap()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.squareMap()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.sqrtMap()).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.powMap(3)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.multiplyMap(3)).to.equal(200);
            expect(e).to.equal(200);
            e = [...f];
            expect(e.floorMapCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...f];
            expect(e.ceilMapCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...f];
            expect(e.roundMapCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...f];
            expect(e.squareMapCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...f];
            expect(e.sqrtMapCopy()).to.equal(200);
            expect(e).to.equal(200);
            e = [...f];
            expect(e.powMapCopy(3)).to.equal(200);
            expect(e).to.equal(200);
            e = [...f];
            expect(e.multiplyMapCopy(3)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.randomRange(10)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.fillRandomRange(5)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.fillRandomRange(5, 2)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.fillRandomRange(5, 2, 7)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.fillRandomRange(5, 0, e.length, "inrange")).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.fillRandomRange(5, 2, 5, "inrange")).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.fillRandomRange(5, 0, e.length, "replace")).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.fillRandomRange(5, 2, 5, "replace")).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.fillRange(5)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.fillRange(5, 2)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expect(e.fillRange(5, 2, 7)).to.equal(200);
            expect(e).to.equal(200);
            e = [...a];
            expecte.fillRange(5, 0, e.length, "inrange")).to.equal(200);
        expect(e).to.equal(200);
        e = [...a];
        expect(e.fillRange(5, 2, 5, "inrange")).to.equal(200);
        expect(e).to.equal(200);
        e = [...a];
        expect(e.fillRange(5, 0, e.length, "replace")).to.equal(200);
        expect(e).to.equal(200);
        e = [...a];
        expect(e.fillRange(5, 2, 5, "replace")).to.equal(200);
        expect(e).to.equal(200);
        // e = [...a];
        // expect(e.pysort()).to.equal(200);
        // expect(e).to.equal(200);
        // e = [...a];
        // expect(e.pysort(null, true)).to.equal(200);
        // expect(e).to.equal(200);
        // e = [...a];
        // expect( e.pysort(null, false)).to.equal(200);
        // expect(e).to.equal(200);
        e = [...a];
        expect(e.Mapper("sqrt", 0, e.length, "replace")).to.equal(200);
        expect(e).to.equal(200);
        e = [...a];
        expect(e.MapperCopy("sqrt", 0, e.length, "replace")).to.equal(200);
        expect(e).to.equal(200);
        // a.max(count, start, end).to.equal(200);
        // a.maxIndexes(count, start, end).to.equal(200);
        // a.min(count, start, end).to.equal(200);
        // a.minIndexes(count, start, end).to.equal(200);

        expect(a.max(2).length).to.equal(2);
        expect(JSON.stringify(a.max(2))).to.equal(JSON.stringify([3, 4]));

        // expect(100).to.equal(100);
        // expect(100).to.equal(100);
        // expect(100).to.equal(100);
        // expect(100).to.equal(100);
        // expect(100).to.equal(100);

        done();
    });

});
